// <auto-generated />
using System;
using Cobit_19.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cobit_19.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230628131316_Create-Identity-Schema")]
    partial class CreateIdentitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cobit_19.Models.AnswerModel", b =>
                {
                    b.Property<int>("AuditID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("QuestionID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Answer")
                        .HasColumnType("int");

                    b.HasKey("AuditID", "QuestionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers", (string)null);

                    b.HasData(
                        new
                        {
                            AuditID = 1,
                            QuestionID = 1,
                            Answer = 1
                        },
                        new
                        {
                            AuditID = 1,
                            QuestionID = 2,
                            Answer = 1
                        },
                        new
                        {
                            AuditID = 1,
                            QuestionID = 3,
                            Answer = 1
                        },
                        new
                        {
                            AuditID = 2,
                            QuestionID = 1,
                            Answer = 1
                        },
                        new
                        {
                            AuditID = 2,
                            QuestionID = 2,
                            Answer = 1
                        },
                        new
                        {
                            AuditID = 2,
                            QuestionID = 3,
                            Answer = 1
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.AuditModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FocusAreaID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FocusAreaID");

                    b.ToTable("Audits", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FocusAreaID = 1,
                            Name = "Audit 1",
                            Status = 0,
                            UserID = 1
                        },
                        new
                        {
                            ID = 2,
                            DateCreated = new DateTime(2009, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FocusAreaID = 1,
                            Name = "Audit 2",
                            Status = 0,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.AuditScopeModel", b =>
                {
                    b.Property<int>("AuditID")
                        .HasColumnType("int");

                    b.Property<int>("ObjectiveID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AuditID", "ObjectiveID");

                    b.HasIndex("ObjectiveID");

                    b.ToTable("AuditScopes", (string)null);

                    b.HasData(
                        new
                        {
                            AuditID = 1,
                            ObjectiveID = 1,
                            UserID = 1
                        },
                        new
                        {
                            AuditID = 1,
                            ObjectiveID = 2,
                            UserID = 1
                        },
                        new
                        {
                            AuditID = 1,
                            ObjectiveID = 3,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.DesignFactorModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FocusAreaID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FocusAreaID");

                    b.ToTable("DesignFactors", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Enterprise Strategy",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 1"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Enterprise Goals",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 2"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Risk Profile",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 3"
                        },
                        new
                        {
                            ID = 4,
                            Description = "IT-Related Issues",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 4"
                        },
                        new
                        {
                            ID = 5,
                            Description = "Threat landscape",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 5"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Compliance Requirements",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 6"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Role of IT",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 7"
                        },
                        new
                        {
                            ID = 8,
                            Description = "Sourcing model for IT",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 8"
                        },
                        new
                        {
                            ID = 9,
                            Description = "IT implementation methods",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 9"
                        },
                        new
                        {
                            ID = 10,
                            Description = "Technology adoption strategy",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 10"
                        },
                        new
                        {
                            ID = 11,
                            Description = "Enterprise Size",
                            FocusAreaID = 1,
                            Name = "Cobit Core Model - Design Factor 11"
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.FocusAreaModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("FocusAreas", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "General Core Model",
                            Name = "Cobit Core Model",
                            UserID = 0
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.MapModel", b =>
                {
                    b.Property<int>("ObjectiveID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("ObjectiveID", "QuestionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Maps", (string)null);

                    b.HasData(
                        new
                        {
                            ObjectiveID = 1,
                            QuestionID = 1,
                            Weight = 1f
                        },
                        new
                        {
                            ObjectiveID = 1,
                            QuestionID = 2,
                            Weight = 0.5f
                        },
                        new
                        {
                            ObjectiveID = 1,
                            QuestionID = 3,
                            Weight = 0.1f
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.ObjectiveModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Objectives", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Code = "EDM01",
                            Description = "Ensure Governance Framework Setting and Maintenance",
                            Name = "EDM01"
                        },
                        new
                        {
                            ID = 2,
                            Code = "EDM02",
                            Description = "Ensure Benefits Delivery",
                            Name = "EDM02"
                        },
                        new
                        {
                            ID = 3,
                            Code = "EDM03",
                            Description = "Ensure Risk Optimisation",
                            Name = "EDM03"
                        },
                        new
                        {
                            ID = 4,
                            Code = "EDM04",
                            Description = "Ensure Resource Optimisation",
                            Name = "EDM04"
                        },
                        new
                        {
                            ID = 5,
                            Code = "EDM05",
                            Description = "Ensure Stakeholder Engagement",
                            Name = "EDM05"
                        },
                        new
                        {
                            ID = 6,
                            Code = "APO01",
                            Description = "Manage the IT Management Framework",
                            Name = "APO01"
                        },
                        new
                        {
                            ID = 7,
                            Code = "APO02",
                            Description = "Manage Strategy",
                            Name = "APO02"
                        },
                        new
                        {
                            ID = 8,
                            Code = "APO03",
                            Description = "Manage Enterprise Architecture",
                            Name = "APO03"
                        },
                        new
                        {
                            ID = 9,
                            Code = "APO04",
                            Description = "Manage Innovation",
                            Name = "APO04"
                        },
                        new
                        {
                            ID = 10,
                            Code = "APO05",
                            Description = "Manage Portfolio",
                            Name = "APO05"
                        },
                        new
                        {
                            ID = 11,
                            Code = "APO06",
                            Description = "Manage Budget and Costs",
                            Name = "APO06"
                        },
                        new
                        {
                            ID = 12,
                            Code = "APO07",
                            Description = "Manage Human Resources",
                            Name = "APO07"
                        },
                        new
                        {
                            ID = 13,
                            Code = "APO08",
                            Description = "Manage Relationships",
                            Name = "APO08"
                        },
                        new
                        {
                            ID = 14,
                            Code = "APO09",
                            Description = "Manage Service Agreements",
                            Name = "APO09"
                        },
                        new
                        {
                            ID = 15,
                            Code = "APO010",
                            Description = "Manage Vendors",
                            Name = "APO010"
                        },
                        new
                        {
                            ID = 16,
                            Code = "APO011",
                            Description = "Manage Quality",
                            Name = "APO011"
                        },
                        new
                        {
                            ID = 17,
                            Code = "APO012",
                            Description = "Manage Risk",
                            Name = "APO012"
                        },
                        new
                        {
                            ID = 18,
                            Code = "APO013",
                            Description = "Manage Security",
                            Name = "APO013"
                        },
                        new
                        {
                            ID = 19,
                            Code = "APO014",
                            Description = "Manage Data",
                            Name = "APO014"
                        },
                        new
                        {
                            ID = 20,
                            Code = "BAI12",
                            Description = "Manage Programs",
                            Name = "BAI01"
                        },
                        new
                        {
                            ID = 21,
                            Code = "BAI02",
                            Description = "Manage Requirements Definition",
                            Name = "BAI02"
                        },
                        new
                        {
                            ID = 22,
                            Code = "BAI03",
                            Description = "Manage Solutions Identification and Build",
                            Name = "BAI03"
                        },
                        new
                        {
                            ID = 23,
                            Code = "BAI04",
                            Description = "Manage Availability and Capacity",
                            Name = "BAI04"
                        },
                        new
                        {
                            ID = 24,
                            Code = "BAI05",
                            Description = "Manage Organizational Change",
                            Name = "BAI05"
                        },
                        new
                        {
                            ID = 25,
                            Code = "BAI06",
                            Description = "Manage IT Changes",
                            Name = "BAI06"
                        },
                        new
                        {
                            ID = 26,
                            Code = "BAI07",
                            Description = "Manage IT Change Acceptance and Transitioning",
                            Name = "BAI07"
                        },
                        new
                        {
                            ID = 27,
                            Code = "BAI08",
                            Description = "Manage Knowledge",
                            Name = "BAI08"
                        },
                        new
                        {
                            ID = 28,
                            Code = "BAI09",
                            Description = "Manage Assets",
                            Name = "BAI09"
                        },
                        new
                        {
                            ID = 29,
                            Code = "BAI010",
                            Description = "Manage Configuration",
                            Name = "BAI10"
                        },
                        new
                        {
                            ID = 30,
                            Code = "BAI011",
                            Description = "Manage Projects",
                            Name = "BAI11"
                        },
                        new
                        {
                            ID = 31,
                            Code = "DSS01",
                            Description = "Manage Operations",
                            Name = "DSS01"
                        },
                        new
                        {
                            ID = 32,
                            Code = "DSS02",
                            Description = "Manage Service Requests and Incidents",
                            Name = "DSS02"
                        },
                        new
                        {
                            ID = 33,
                            Code = "DSS03",
                            Description = "Manage Problems",
                            Name = "DSS03"
                        },
                        new
                        {
                            ID = 34,
                            Code = "DSS04",
                            Description = "Manage Continuity",
                            Name = "DSS04"
                        },
                        new
                        {
                            ID = 35,
                            Code = "DSS05",
                            Description = "Manage Security Services",
                            Name = "DSS05"
                        },
                        new
                        {
                            ID = 36,
                            Code = "DSS06",
                            Description = "Manage Business Process Controls",
                            Name = "DSS06"
                        },
                        new
                        {
                            ID = 37,
                            Code = "MEA01",
                            Description = "Manage Perfomance and Comformance Monitoring",
                            Name = "MEA01"
                        },
                        new
                        {
                            ID = 38,
                            Code = "MEA02",
                            Description = "Manage System of Internal Control",
                            Name = "MEA02"
                        },
                        new
                        {
                            ID = 39,
                            Code = "MEA03",
                            Description = "Manage Compliance With External Requirement",
                            Name = "MEA03"
                        },
                        new
                        {
                            ID = 40,
                            Code = "MEA04",
                            Description = "Manage Assurance",
                            Name = "MEA04"
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.QuestionModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DesignFactorID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DesignFactorID");

                    b.ToTable("Questions", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DesignFactorID = 1,
                            Question = "Growth/Acquisition"
                        },
                        new
                        {
                            ID = 2,
                            DesignFactorID = 1,
                            Question = "Innovation/Differentiation"
                        },
                        new
                        {
                            ID = 3,
                            DesignFactorID = 1,
                            Question = "Cost Leadership"
                        },
                        new
                        {
                            ID = 4,
                            DesignFactorID = 1,
                            Question = "Client Service/Stability"
                        },
                        new
                        {
                            ID = 5,
                            DesignFactorID = 2,
                            Question = "EG01—Portfolio of competitive products and services"
                        },
                        new
                        {
                            ID = 6,
                            DesignFactorID = 2,
                            Question = "EG02—Managed business risk"
                        },
                        new
                        {
                            ID = 7,
                            DesignFactorID = 2,
                            Question = "EG03—Compliance with external laws and regulations"
                        },
                        new
                        {
                            ID = 8,
                            DesignFactorID = 2,
                            Question = "EG04—Quality of financial information"
                        },
                        new
                        {
                            ID = 9,
                            DesignFactorID = 2,
                            Question = "EG05—Customer-oriented service culture"
                        },
                        new
                        {
                            ID = 10,
                            DesignFactorID = 2,
                            Question = "EG06—Business-service continuity and availability"
                        },
                        new
                        {
                            ID = 11,
                            DesignFactorID = 2,
                            Question = "EG07—Quality of management information"
                        },
                        new
                        {
                            ID = 12,
                            DesignFactorID = 2,
                            Question = "EG08—Optimization of internal business process functionality"
                        },
                        new
                        {
                            ID = 13,
                            DesignFactorID = 2,
                            Question = "EG09—Optimization of business process costs"
                        },
                        new
                        {
                            ID = 14,
                            DesignFactorID = 2,
                            Question = "EG10—Staff skills, motivation and productivity"
                        },
                        new
                        {
                            ID = 15,
                            DesignFactorID = 2,
                            Question = "EG11—Compliance with internal policies"
                        },
                        new
                        {
                            ID = 16,
                            DesignFactorID = 2,
                            Question = "EG12—Managed digital transformation programs"
                        },
                        new
                        {
                            ID = 17,
                            DesignFactorID = 2,
                            Question = "EG13—Product and business innovation"
                        },
                        new
                        {
                            ID = 18,
                            DesignFactorID = 3,
                            Question = "IT investment decision-making, portfolio definition & maintenance"
                        },
                        new
                        {
                            ID = 19,
                            DesignFactorID = 3,
                            Question = "Program & projects life cycle management"
                        },
                        new
                        {
                            ID = 20,
                            DesignFactorID = 3,
                            Question = "IT cost & oversight"
                        },
                        new
                        {
                            ID = 21,
                            DesignFactorID = 3,
                            Question = "IT expertise, skills & behaviour"
                        },
                        new
                        {
                            ID = 22,
                            DesignFactorID = 3,
                            Question = "Enterprise/IT architecture"
                        },
                        new
                        {
                            ID = 23,
                            DesignFactorID = 3,
                            Question = "IT operational infrastructure incidents"
                        },
                        new
                        {
                            ID = 24,
                            DesignFactorID = 3,
                            Question = "Unauthorized actions"
                        },
                        new
                        {
                            ID = 25,
                            DesignFactorID = 3,
                            Question = "Software adoption/usage problems"
                        },
                        new
                        {
                            ID = 26,
                            DesignFactorID = 3,
                            Question = "Hardware incidents"
                        },
                        new
                        {
                            ID = 27,
                            DesignFactorID = 3,
                            Question = "Software failures"
                        },
                        new
                        {
                            ID = 28,
                            DesignFactorID = 3,
                            Question = "Logical attacks (hacking, malware, etc.)"
                        },
                        new
                        {
                            ID = 29,
                            DesignFactorID = 3,
                            Question = "Third-party/supplier incidents"
                        },
                        new
                        {
                            ID = 30,
                            DesignFactorID = 3,
                            Question = "Noncompliance"
                        },
                        new
                        {
                            ID = 31,
                            DesignFactorID = 3,
                            Question = "Geopolitical Issues"
                        },
                        new
                        {
                            ID = 32,
                            DesignFactorID = 3,
                            Question = "Industrial action"
                        },
                        new
                        {
                            ID = 33,
                            DesignFactorID = 3,
                            Question = "Acts of nature"
                        },
                        new
                        {
                            ID = 34,
                            DesignFactorID = 3,
                            Question = "Technology-based innovation"
                        },
                        new
                        {
                            ID = 35,
                            DesignFactorID = 3,
                            Question = "Environmental"
                        },
                        new
                        {
                            ID = 36,
                            DesignFactorID = 3,
                            Question = "Data & information management"
                        },
                        new
                        {
                            ID = 37,
                            DesignFactorID = 4,
                            Question = "Frustration between different IT entities across the organization because of a perception of low contribution to business value"
                        },
                        new
                        {
                            ID = 38,
                            DesignFactorID = 4,
                            Question = "Frustration between business departments (i.e., the IT customer) and the IT department because of failed initiatives or a perception of low contribution to business value"
                        },
                        new
                        {
                            ID = 39,
                            DesignFactorID = 4,
                            Question = "Significant IT-related incidents, such as data loss, security breaches, project failure and application errors, linked to IT"
                        },
                        new
                        {
                            ID = 40,
                            DesignFactorID = 4,
                            Question = "Service delivery problems by the IT outsourcer(s)"
                        },
                        new
                        {
                            ID = 41,
                            DesignFactorID = 4,
                            Question = "Failures to meet IT-related regulatory or contractual requirements"
                        },
                        new
                        {
                            ID = 42,
                            DesignFactorID = 4,
                            Question = "Regular audit findings or other assessment reports about poor IT performance or reported IT quality or service problems"
                        },
                        new
                        {
                            ID = 43,
                            DesignFactorID = 4,
                            Question = "Substantial hidden and rogue IT spending, that is, IT spending by user departments outside the control of the normal IT investment decision mechanisms and approved budgets"
                        },
                        new
                        {
                            ID = 44,
                            DesignFactorID = 4,
                            Question = "Duplications or overlaps between various initiatives, or other forms of wasted resources"
                        },
                        new
                        {
                            ID = 45,
                            DesignFactorID = 4,
                            Question = "Insufficient IT resources, staff with inadequate skills or staff burnout/dissatisfaction"
                        },
                        new
                        {
                            ID = 46,
                            DesignFactorID = 4,
                            Question = "IT-enabled changes or projects frequently failing to meet business needs and delivered late or over budget"
                        },
                        new
                        {
                            ID = 47,
                            DesignFactorID = 4,
                            Question = "Reluctance by board members, executives or senior management to engage with IT, or a lack of committed business sponsorship for IT"
                        },
                        new
                        {
                            ID = 48,
                            DesignFactorID = 4,
                            Question = "Complex IT operating model and/or unclear decision mechanisms for IT-related decisions"
                        },
                        new
                        {
                            ID = 49,
                            DesignFactorID = 4,
                            Question = "Excessively high cost of IT"
                        },
                        new
                        {
                            ID = 50,
                            DesignFactorID = 4,
                            Question = "Obstructed or failed implementation of new initiatives or innovations caused by the current IT architecture and systems"
                        },
                        new
                        {
                            ID = 51,
                            DesignFactorID = 4,
                            Question = "Gap between business and technical knowledge, which leads to business users and information and/or technology specialists speaking different languages"
                        },
                        new
                        {
                            ID = 52,
                            DesignFactorID = 4,
                            Question = "Regular issues with data quality and integration of data across various sources"
                        },
                        new
                        {
                            ID = 53,
                            DesignFactorID = 4,
                            Question = "High level of end-user computing, creating (among other problems) a lack of oversight and quality control over the applications that are being developed and put in operation"
                        },
                        new
                        {
                            ID = 54,
                            DesignFactorID = 4,
                            Question = "Business departments implementing their own information solutions with little or no involvement of the enterprise IT department (related to end-user computing, which often stems from dissatisfaction with IT solutions and services)"
                        },
                        new
                        {
                            ID = 55,
                            DesignFactorID = 4,
                            Question = "Ignorance of and/or noncompliance with privacy regulations"
                        },
                        new
                        {
                            ID = 56,
                            DesignFactorID = 4,
                            Question = "Inability to exploit new technologies or innovate using I&T"
                        },
                        new
                        {
                            ID = 57,
                            DesignFactorID = 5,
                            Question = "High"
                        },
                        new
                        {
                            ID = 58,
                            DesignFactorID = 5,
                            Question = "Normal"
                        },
                        new
                        {
                            ID = 59,
                            DesignFactorID = 6,
                            Question = "High compliance requirements"
                        },
                        new
                        {
                            ID = 60,
                            DesignFactorID = 6,
                            Question = "Normal compliance requirements"
                        },
                        new
                        {
                            ID = 61,
                            DesignFactorID = 6,
                            Question = "Low compliance requirements"
                        },
                        new
                        {
                            ID = 62,
                            DesignFactorID = 7,
                            Question = "Support"
                        },
                        new
                        {
                            ID = 63,
                            DesignFactorID = 7,
                            Question = "Factory"
                        },
                        new
                        {
                            ID = 64,
                            DesignFactorID = 7,
                            Question = "Turnaround"
                        },
                        new
                        {
                            ID = 65,
                            DesignFactorID = 7,
                            Question = "Strategic"
                        },
                        new
                        {
                            ID = 66,
                            DesignFactorID = 8,
                            Question = "Outsourcing"
                        },
                        new
                        {
                            ID = 67,
                            DesignFactorID = 8,
                            Question = "Cloud"
                        },
                        new
                        {
                            ID = 68,
                            DesignFactorID = 8,
                            Question = "Insourced"
                        },
                        new
                        {
                            ID = 69,
                            DesignFactorID = 9,
                            Question = "Agile"
                        },
                        new
                        {
                            ID = 70,
                            DesignFactorID = 9,
                            Question = "DevOps"
                        },
                        new
                        {
                            ID = 71,
                            DesignFactorID = 9,
                            Question = "Traditional"
                        },
                        new
                        {
                            ID = 72,
                            DesignFactorID = 10,
                            Question = "First mover"
                        },
                        new
                        {
                            ID = 73,
                            DesignFactorID = 10,
                            Question = "Follower"
                        },
                        new
                        {
                            ID = 74,
                            DesignFactorID = 10,
                            Question = "Slow adopter"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cobit_19.Models.AnswerModel", b =>
                {
                    b.HasOne("Cobit_19.Models.AuditModel", "Audit")
                        .WithMany("Answers")
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cobit_19.Models.QuestionModel", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Cobit_19.Models.AuditModel", b =>
                {
                    b.HasOne("Cobit_19.Models.FocusAreaModel", "FocusAreas")
                        .WithMany("Audits")
                        .HasForeignKey("FocusAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusAreas");
                });

            modelBuilder.Entity("Cobit_19.Models.AuditScopeModel", b =>
                {
                    b.HasOne("Cobit_19.Models.AuditModel", "Audit")
                        .WithMany("AuditScopes")
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cobit_19.Models.ObjectiveModel", "Objective")
                        .WithMany("AuditScopes")
                        .HasForeignKey("ObjectiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("Cobit_19.Models.DesignFactorModel", b =>
                {
                    b.HasOne("Cobit_19.Models.FocusAreaModel", "FocusArea")
                        .WithMany("DesignFactors")
                        .HasForeignKey("FocusAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusArea");
                });

            modelBuilder.Entity("Cobit_19.Models.MapModel", b =>
                {
                    b.HasOne("Cobit_19.Models.ObjectiveModel", "Objective")
                        .WithMany("Maps")
                        .HasForeignKey("ObjectiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cobit_19.Models.QuestionModel", "Question")
                        .WithMany("Maps")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Cobit_19.Models.QuestionModel", b =>
                {
                    b.HasOne("Cobit_19.Models.DesignFactorModel", "DesignFactor")
                        .WithMany("Questions")
                        .HasForeignKey("DesignFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesignFactor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobit_19.Models.AuditModel", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("AuditScopes");
                });

            modelBuilder.Entity("Cobit_19.Models.DesignFactorModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Cobit_19.Models.FocusAreaModel", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("DesignFactors");
                });

            modelBuilder.Entity("Cobit_19.Models.ObjectiveModel", b =>
                {
                    b.Navigation("AuditScopes");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("Cobit_19.Models.QuestionModel", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Maps");
                });
#pragma warning restore 612, 618
        }
    }
}
