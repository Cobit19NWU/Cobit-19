@page "/DesignFactor"
@using Cobit_19.Business.Audits
@using Cobit_19.Business.FocusAreas;
@using Cobit_19.Shared.Dtos
@using Syncfusion.Blazor.Charts
@using Microsoft.AspNetCore.WebUtilities
@inject AuditProvider auditProvider
@inject FocusAreaProvider focusAreaProvider
@inject NavigationManager navigationManager

@code {
    protected DesignFactorDto? _designFactorDto;
    protected List<ObjectiveDto>? _objectiveDtos;

    [Parameter]
    [SupplyParameterFromQuery]
    public int AuditId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public int DFId { get; set; }

    protected List<ObjectiveValueDto>? _mappedObjectives { get; set; }
    private int _isNextButtonDFId { get; set; } = -1;
    private int _isPreviousButtonDFId { get; set; } = -1;

    private enum UpdateType
    {
        answer,
        odds
    }

//Constructor
    protected override async Task OnInitializedAsync()
    {
        if(_designFactorDto == null)
        {
            _designFactorDto = await auditProvider.getDesignFactorFullAsync(AuditId, DFId);
            _objectiveDtos = await auditProvider.getObjectivesAsync();
            _mappedObjectives = MappingService.Calculate(_designFactorDto, _objectiveDtos);
            CheckNavButtons();
        }
    }
// Update values 
    private async Task Update(int questionId, UpdateType updateType, ChangeEventArgs args)
    {
        int value;
        if (int.TryParse(args.Value.ToString(), out value))
        {
            var old = _designFactorDto.Questions.First(x => x.ID == questionId).Answers.First();

            AnswerEditorDto answerEditorDto = new AnswerEditorDto()
                {
                    AuditID = AuditId,
                    QuestionID = questionId
                };

            if (updateType == UpdateType.answer)
            {
                answerEditorDto.Answer = value;
                answerEditorDto.Odds = old.Odds;
            }
            else
            {
                answerEditorDto.Answer = old.Answer;
                answerEditorDto.Odds = value;
            }

            await auditProvider.updateAnswerAsync(answerEditorDto);
        
            // I feel this is sucha bad way to do this but i cant think of a better way
            _designFactorDto.Questions.First(x => x.ID == questionId).Answers.First().Answer = answerEditorDto.Answer;
            _designFactorDto.Questions.First(x => x.ID == questionId).Answers.First().Odds = answerEditorDto.Odds;

            _mappedObjectives = MappingService.Calculate(_designFactorDto, _objectiveDtos);
        }


    }

// Used to check if the answer is selected
    private bool IsAnswerSelected(int answer, int option)
    {
        return answer == option;
    }

// Nav buttons logic
    private void CheckNavButtons()
    {
        // Check if there is a next design factor
        var next = focusAreaProvider.GetNextDesignFactor(AuditId, DFId);

        if (next != null)
        {
            _isNextButtonDFId = next.ID;
        }
        else
        {
            _isNextButtonDFId = -1;
        }

        // Check if there is a previous design factor
        var prev = focusAreaProvider.GetPrevDesignFactor(AuditId, DFId);

        if (prev != null)
        {
            _isPreviousButtonDFId = prev.ID;
        }
        else
        {
            _isPreviousButtonDFId = -1;
        }
    }

    private void NavButtonPress(int navDFId)
    {
        var queryStrDict = new Dictionary<string, string>
            {
                ["AuditId"] = (AuditId).ToString(),
                ["DFId"] = (navDFId).ToString(),
            };
        navigationManager.NavigateTo(
            QueryHelpers.AddQueryString("/DesignFactor", queryStrDict)
        );
    }
}

<div class="container-md bg-light mt-4">
    <div class="row">
        <div class="">
            @if (_designFactorDto is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <div>
                    <h3> Design Factor : @_designFactorDto.Description</h3>
                </div>
                @if (_designFactorDto.Questions.Count == 0)
                {
                    <tr>
                        <td colspan="4">No questions found.</td>
                    </tr>
                }
                else
                {
                    <table class="table border-3 table-bordered" >
                        <thead class="table-primary">
                            <tr>
                                <th scope="col">Description</th>
                                @if (_designFactorDto.Questions.First().Answers.First().Odds == 0)
                                {
                                    @if (_designFactorDto.Questions.First().Answers.First().AnswerRange <= 8)
                                    {
                                        @for (int i = 1; i <= _designFactorDto.Questions.First().Answers.First().AnswerRange; i++)
                                        {
                                            <th scope="col">@i</th>
                                        }
                                    }
                                    else if (_designFactorDto.Questions.First().Answers.First().AnswerRange == 100)
                                    {
                                        <th scope="col">Value(%)</th>
                                    }
                                    else
                                    {
                                        <th scope="col">Value(1 - @_designFactorDto.Questions.First().Answers.First().AnswerRange)</th>
                                    }
                                }
                                else
                                {
                                    <th scope="col">Value(1 - @_designFactorDto.Questions.First().Answers.First().AnswerRange)</th>
                                    <th scope="col">Likelihood(1 - @_designFactorDto.Questions.First().Answers.First().AnswerRange)</th>
                                }
                                <th scope="col">Baseline</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var q in _designFactorDto.Questions)
                            {
                                <tr>
                                    <td>
                                        @q.Question
                                    </td>
                                    @if (_designFactorDto.Questions.First().Answers.First().Odds == 0)
                                    {

                                        @if (q.Answers.First().AnswerRange <= 8)
                                        {
                                            @for (int i = 1; i <= q.Answers.First().AnswerRange; i++)
                                            {
                                                <td>
                                                    <input type="radio" name="@q.ID" id="@q.ID" value="@i"
                                                    class="form-check-input"
                                                    @onchange="((e) => Update(q.ID, UpdateType.answer, e))"
                                                    checked="@IsAnswerSelected(q.Answers.First().Answer, i)" />
                                                </td>
                                            }
                                        }
                                        else
                                        {
                                            <td>
                                                <input type="number" name="@q.ID" id="@q.ID" min="0" max="@q.Answers.First().AnswerRange" value="@q.Answers.First().Answer"
                                                class="form-control"
                                                @onchange="((e) => Update(q.ID, UpdateType.answer, e))" />
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        <td>
                                            <input type="number" name="@q.ID" id="@q.ID" min="0" max="@q.Answers.First().AnswerRange" value="@q.Answers.First().Answer"
                                            class="form-control"
                                            @onchange="((e) => Update(q.ID, UpdateType.answer, e))" />
                                        </td> 
                                        <td>
                                            <input type="number" name="@q.ID" id="@q.ID" min="0" max="@q.Answers.First().AnswerRange" value="@q.Answers.First().Odds"
                                            class="form-control"
                                            @onchange="((e) => Update(q.ID, UpdateType.odds, e))" />
                                        </td>
                                    }
                                    <td>
                                        @q.BaseAnswer
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <DesignFactorChart Values="@_mappedObjectives"></DesignFactorChart>
                }
                <div class="row">
                    <div class="col">
                        @if (_isPreviousButtonDFId != -1)
                        {
                            <button type="button" onclick="@(() => NavButtonPress(_isPreviousButtonDFId))" class="btn btn-primary">Back</button>
                        }
                    </div>
                    <div class="col">
                        <div class="float-end">
                            @if (_isNextButtonDFId != -1)
                            {
                                <button type="button" onclick="@(() => NavButtonPress(_isNextButtonDFId))" class="btn btn-primary">Next</button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

