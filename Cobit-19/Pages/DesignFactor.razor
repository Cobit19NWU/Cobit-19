@page "/DesignFactor"
@using Cobit_19.Business.Audits
@using Cobit_19.Shared.Dtos
@using Syncfusion.Blazor.Charts
@using Microsoft.AspNetCore.WebUtilities
@inject AuditProvider auditProvider
@inject NavigationManager navigationManager

@code {
    protected SfChart sfChart;
    protected DesignFactorDto _designFactorDto;
    protected List<ObjectiveDto>? _objectiveDtos;

    [Parameter]
    [SupplyParameterFromQuery]
    public int AuditId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public int DFId { get; set; }

    public List<ObjectiveValueDto>? _mappedObjectives { get; set; }
    public int _isNextButtonDFId { get; set; } = -1;
    public int _isPreviousButtonDFId { get; set; } = -1;

    //Constructor
    protected override async Task OnInitializedAsync()
    {
        if(_designFactorDto == null)
        {
            _designFactorDto = await auditProvider.getDesignFactorFullAsync(AuditId, DFId);
            _objectiveDtos = await auditProvider.getObjectivesAsync();
            _mappedObjectives = MappingService.Calculate(_designFactorDto, _objectiveDtos);
            await CheckNavButtons();
        }

    }

    private async void SubmitAnswer(int questionId, ChangeEventArgs args)
    {
        int answ = -1;
        if (int.TryParse(args.Value.ToString(), out answ))
        {
            var old = _designFactorDto.Questions.First(x => x.ID == questionId).Answers.First();

            AnswerEditorDto answerEditorDto = new AnswerEditorDto()
                {
                    AuditID = AuditId,
                    QuestionID = questionId,
                    Answer = answ,
                    Odds = old.Odds
                };

            await auditProvider.updateAnswerAsync(answerEditorDto);
        }

        _designFactorDto.Questions.First(x => x.ID == questionId).Answers.First().Answer = answ;
        _mappedObjectives = MappingService.Calculate(_designFactorDto, _objectiveDtos);
        await sfChart.RefreshAsync();

    }

    private async void SubmitOdds(int questionId, ChangeEventArgs args)
    {
        int odds = -1;
        if (int.TryParse(args.Value.ToString(), out odds))
        {
            var old = _designFactorDto.Questions.First(x => x.ID == questionId).Answers.First();

            AnswerEditorDto answerEditorDto = new AnswerEditorDto()
                {
                    AuditID = AuditId,
                    QuestionID = questionId,
                    Answer = old.Answer,
                    Odds = odds
                };

            await auditProvider.updateAnswerAsync(answerEditorDto);
        }

        _designFactorDto.Questions.First(x => x.ID == questionId).Answers.First().Odds = odds;
        _mappedObjectives = MappingService.Calculate(_designFactorDto, _objectiveDtos);
        await sfChart.RefreshAsync();
    }

    // Used to check if the answer is selected
    private bool IsAnswerSelected(int answer, int option)
    {
        return answer == option;
    }

    private async Task CheckNavButtons()
    {
        var Audit = await auditProvider.getAsync(AuditId);
        var DF = await auditProvider.getDesignFactorsAsync(AuditId);
        var currentDF = DF.Find(x => x.ID == DFId);
        var currentDFIndex = DF.IndexOf(currentDF);

        if (DF.IndexOf(currentDF) >= 1) _isPreviousButtonDFId = DF[DF.IndexOf(currentDF) - 1].ID;
        if (DF.IndexOf(currentDF) < DF.Count - 1) _isNextButtonDFId = DF[DF.IndexOf(currentDF) + 1].ID;
    }

    private void NextButtonPress()
    {
        var queryStrDict = new Dictionary<string, string>
            {
                ["AuditId"] = (AuditId).ToString(),
                ["DFId"] = (DFId+1).ToString(),
            };
        navigationManager.NavigateTo(
            QueryHelpers.AddQueryString("/DesignFactor", queryStrDict)
        );
    }

    private void PreviousButtonPress()
    {
        var queryStrDict = new Dictionary<string, string>
            {
                ["AuditId"] = (AuditId).ToString(),
                ["DFId"] = (DFId - 1).ToString(),
            };
        navigationManager.NavigateTo(
            QueryHelpers.AddQueryString("/DesignFactor", queryStrDict)
        );
    }
}

<AuthorizeView>
    <div class="container-md bg-light mt-4">
        <div class="row">
            <div class="">
                @if (_designFactorDto is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div>
                        <h3> Design Factor : @_designFactorDto.Description</h3>
                    </div>
                    @if (_designFactorDto.Questions.Count == 0)
                    {
                        <tr>
                            <td colspan="4">No questions found.</td>
                        </tr>
                    }
                    else
                    {
                        <table class="table border-3 table-bordered" >
                            <thead class="table-primary">
                                <tr>
                                    <th scope="col">Description</th>
                                    @if (_designFactorDto.Questions.First().Answers.First().Odds == 0)
                                    {
                                        @if (_designFactorDto.Questions.First().Answers.First().AnswerRange <= 8)
                                        {
                                            @for (int i = 1; i <= _designFactorDto.Questions.First().Answers.First().AnswerRange; i++)
                                            {
                                                <th scope="col">@i</th>
                                            }
                                        }
                                        else if (_designFactorDto.Questions.First().Answers.First().AnswerRange == 100)
                                        {
                                            <th scope="col">Value(%)</th>
                                        }
                                        else
                                        {
                                            <th scope="col">Value(1 - @_designFactorDto.Questions.First().Answers.First().AnswerRange)</th>
                                        }
                                    }
                                    else
                                    {
                                        <th scope="col">Value(1 - @_designFactorDto.Questions.First().Answers.First().AnswerRange)</th>
                                        <th scope="col">Value(1 - @_designFactorDto.Questions.First().Answers.First().AnswerRange)</th>
                                    }
                                    <th scope="col">Baseline</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var q in _designFactorDto.Questions)
                                {
                                    <tr>
                                        <td>
                                            @q.Question
                                        </td>
                                        @if (_designFactorDto.Questions.First().Answers.First().Odds == 0)
                                        {

                                            @if (q.Answers.First().AnswerRange <= 8)
                                            {
                                                @for (int i = 1; i <= q.Answers.First().AnswerRange; i++)
                                                {
                                                    <td>
                                                        <input type="radio" name="@q.ID" id="@q.ID" value="@i"
                                                        class="form-check-input"
                                                        @onchange="((e) => SubmitAnswer(q.ID, e))"
                                                        checked="@IsAnswerSelected(q.Answers.First().Answer, i)" />
                                                    </td>
                                                }
                                            }
                                            else
                                            {
                                                <td>
                                                    <input type="number" name="@q.ID" id="@q.ID" min="0" max="@q.Answers.First().AnswerRange" value="@q.Answers.First().Answer"
                                                    class="form-control"
                                                    @onchange="((e) => SubmitAnswer(q.ID, e))" />
                                                </td>
                                            }
                                        }
                                        else
                                        {
                                            <td>
                                                <input type="number" name="@q.ID" id="@q.ID" min="0" max="@q.Answers.First().AnswerRange" value="@q.Answers.First().Answer"
                                                class="form-control"
                                                @onchange="((e) => SubmitAnswer(q.ID, e))" />
                                            </td>
                                            <td>
                                                <input type="number" name="@q.ID" id="@q.ID" min="0" max="@q.Answers.First().AnswerRange" value="@q.Answers.First().Odds"
                                                class="form-control"
                                                @onchange="((e) => SubmitOdds(q.ID, e))" />
                                            </td>
                                        }
                                        <td>
                                            @q.BaseAnswer
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        @if (_mappedObjectives != null)
                        {
                            <div class="col-lg-12">
                                <div class="panel panel-info">
                                    <div class="panel-heading">
                                        <i class="fa fa-info-circle"></i> Info Panel - Technology adoption strategy
                                    </div>
                                    <div class="panel-body">
                                        <p>
                                            The output section of this tab contains the calculated relative importance of each of the 40 COBIT
                                            2019 governance and management objectives. The results are represented as a bar chart and as a spider diagram.
                                        </p>
                                    </div>
                                    <figure class="figure flex-lg-fill">
                                        <div class="figure img-fluid rounded">
                                            <SfChart @ref="sfChart">
                                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                                                </ChartPrimaryXAxis>

                                                <ChartSeriesCollection>
                                                    <ChartSeries DataSource="@_mappedObjectives" XName="Objective" YName="RelativeInportance"
                                                                 Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                                                    </ChartSeries>
                                                </ChartSeriesCollection>
                                            </SfChart>
                                        </div>
                                    </figure>
                                </div>
                            </div>

                            <div class="align-items-center justify-content-center">\
                                <h3> Radial Chart</h3>
                            
                            </div>
                        }
                    }
                    <div class="row">
                        <div class="col">
                            @if (_isPreviousButtonDFId != -1)
                            {
                                <button type="button" onclick="@(() => PreviousButtonPress())" class="btn btn-primary">Back</button>
                            }
                        </div>
                        <div class="col">
                            <div class="float-end">
                                @if (_isNextButtonDFId != -1)
                                {
                                    <button type="button" onclick="@(() => NextButtonPress())" class="btn btn-primary">Next</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</AuthorizeView>

