@page "/UserManagement"
@using Blazored.Toast.Configuration;
@using Cobit_19.Business.Admin
@using Cobit_19.Business.FocusAreas
@using Cobit_19.Business.Audits
@using Cobit_19.Shared.Dtos
@using Blazored.Toast
@using Blazored.Toast.Services
@using System.ComponentModel.DataAnnotations;
@inject UserManagementProvider userManagementProvider
@inject FocusAreaProvider focusAreaProvider
@inject AuditProvider auditProvider
@inject IToastService toastService

@code {
    public IList<UserDto>? allUsers;
    public List<String>? allRoles;
    public string? deleteUserID { get; set; }

    private UserModel userModel = new UserModel();

    protected override void OnInitialized()
    {
        RefreshUserData();
    }

    private void RefreshUserData()
    {
        allUsers = userManagementProvider.GetAllUsers();
        allRoles = userManagementProvider.getAllRoles();
    }

    private async Task AddUser()
    {
        UserEditorDto newUser = new UserEditorDto
        {
            UserName = userModel.Email,
            Password = userModel.Password,
            FirstName = userModel.FirstName,
            LastName = userModel.LastName,
            Email = userModel.Email
        };

        var res = await userManagementProvider.CreateUserAsync(newUser);
        if (!res)
        {
            toastService.ShowError("User NOT created! User may already exist.");
            return;
        }

        await userManagementProvider.addUserToRoleAsync(userModel.Email, userModel.Role);
        await focusAreaProvider.AddUserToFocusAreaAsync(1, userModel.Email);

        if (userModel.Role == "Administrator")
        {
            await auditProvider.addMemberToAllAudits(userModel.Email);
        }

        toastService.ShowSuccess("User Successfully Created!");

        RefreshUserData();
        StateHasChanged();
    }

    private async Task deleteUserOnClickAsync(string userID)
    {
        var res = await userManagementProvider.DeleteUserAsync(userID);

        if (res)
        {
            toastService.ShowSuccess("User Deleted!");
            RefreshUserData();
            StateHasChanged();
        }
        else
        {
            toastService.ShowError("User NOT deleted! User is assigned to an audit. Remove User to delete");
        }
    }

    private class UserModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "First Name is required.")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required.")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "User Role is required.")]
        public string Role { get; set; }
    }
}

<div class="container-fluid">
    <BlazoredToasts Position="ToastPosition.TopLeft"
                    Timeout="4"
                    IconType="IconType.Material" />
    
                    <div class="container">
        <div class="row">
            <div class="panel panel-primary">

                <div class="panel-heading p-2 mb-2" style="color: white; background-color : purple;">
                    <b>
                        Manage Users
                    </b>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col border col-8">
                <table class="table table-hover table-striped modal-dialog-scrollable">
                    <thead style="">
                        <tr>
                            <th style="background-color: purple; color: white;">#</th>
                            <th style="background-color: purple; color: white;">Name</th>
                            <th style="background-color: purple; color: white;">Email</th>
                            <th style="background-color: purple; color: white;">Delete</th>
                        </tr>

                    </thead>
                    <tbody>
                        @foreach (var user in allUsers)
                        {
                            <tr>
                                <td>@(allUsers.IndexOf(user) + 1)</td>
                                <td>@(user.FirstName) @(user.LastName)</td>
                                <td>@user.UserName</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => deleteUserOnClickAsync(user.ID)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col border col-4">
                <div class="panel-heading p-2" style="color: white; font-weight: bold; background-color: purple">
                    Add user
                </div>
                <div class="">
                    <EditForm Model="@userModel" OnValidSubmit="AddUser">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="emailField"><b>Email:</b></label>
                            <InputText id="emailField" @bind-Value="@userModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => userModel.Email)" />
                        </div>

                        <div class="form-group">
                            <label for="firstNameField"><b>First Name:</b></label>
                            <InputText id="firstNameField" @bind-Value="@userModel.FirstName" class="form-control" />
                            <ValidationMessage For="@(() => userModel.FirstName)" />
                        </div>

                        <div class="form-group">
                            <label for="lastNameField"><b>Last Name:</b></label>
                            <InputText id="lastNameField" @bind-Value="@userModel.LastName" class="form-control" />
                            <ValidationMessage For="@(() => userModel.LastName)" />
                        </div>

                        <div class="form-group">
                            <label for="passwordField"><b>Password:</b></label>
                            <InputText id="passwordField" @bind-Value="@userModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => userModel.Password)" />
                        </div>

                        <div class="form-group">
                            <label for="userRoleField"><b>Select User Role:</b></label>
                            <InputSelect id="userRoleField" @bind-Value="@userModel.Role" class="form-control">
                                <option value="">-- Select User Role --</option>
                                @foreach (var roleName in allRoles)
                                {
                                    <option value="@roleName">@roleName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => userModel.Role)" />
                        </div>

                        <div class="form-group align-content-center p-2">
                            <button type="submit" class="btn btn-primary">Add User</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    
</div>