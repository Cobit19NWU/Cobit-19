@page "/ManageAudit"
@using Blazored.Toast.Configuration;
@using Cobit_19.Shared.Dtos
@using Cobit_19.Business.FocusAreas
@using Cobit_19.Business.Audits
@using Cobit_19.Business.Admin
@using Cobit_19.Shared.Enums
@inject FocusAreaProvider focusAreaProvider
@inject AuditProvider auditProvider
@inject UserManagementProvider userManagementProvider
@using Blazored.Toast
@using Blazored.Toast.Services
@inject IToastService toastService
@inject NavigationManager navigationManager

@code{
    [Parameter]
    [SupplyParameterFromQuery]
    public int focusAreaID { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string userID { get; set; }

    public IEnumerable<AuditDto> audits;
    public string? newAuditName;
    public int selectDeleteAuditID;
    public int addUserAuditID;
    public string? addUserID;
    public AuditDto deletedAudit;
    public IList<UserDto> allUsers;
    public bool createAuditNotificationVisible = false;

    protected override void OnInitialized()
    {
        audits = focusAreaProvider.GetAuditsForFocusAreaByUserID(userID, focusAreaID);
        allUsers = userManagementProvider.GetAllUsers();

        RefreshData();
    }

    private void RefreshData()
    {
        audits = focusAreaProvider.GetAuditsForFocusAreaByUserID(userID, focusAreaID);
        allUsers = userManagementProvider.GetAllUsers();
    }

    private async Task deleteAudit()
    {
        await auditProvider.deleteAsync(selectDeleteAuditID);
        toastService.ShowSuccess("Audit Deleted");

        RefreshData();
        StateHasChanged();
    }

    private async Task createAudit()
    {
        var newAudit = new AuditEditorDto
            {
                FocusAreaID = focusAreaID,
                Name = newAuditName,
                UserID = userID,
                DateCreated = DateTime.Now,
                DateCompleted = null,
                Status = AuditStatus.NotStarted
            };

        await auditProvider.createAsync(newAudit);
        toastService.ShowSuccess("Audit Created");

        RefreshData();
        StateHasChanged();
    }

    private async Task addUsertoAudit()
    {
        var newAuditMember = new AuditMemberDto
        {
            ApplicationUserID = addUserID,
            AuditID = addUserAuditID
        };

        await auditProvider.addAuditMember(newAuditMember);
        toastService.ShowSuccess("User added");

        RefreshData();
        StateHasChanged();
    }

    private void handleBackClick()
    {
        navigationManager.NavigateTo($"/AuditSelect?focusAreaID={focusAreaID}");
    }
}

<BlazoredToasts Position="ToastPosition.TopLeft"
                Timeout="4"
                IconType="IconType.Material"
                 />
<div class="row">

    <div class="container-fluid ">
        <div class="col">
            <div class="panel panel-primary">

                <div class="panel-heading p-2" style="color: white; background-color : purple"><b>
                    Manage Audits
                    </b>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm border m-3"  >
            <div class="panel-heading p-1" style="color: white; background-color : purple">
                Create new audit
            </div>
            <label for="newAuditName"><b>Audit Name: </b></label><br>
            <input type="text" id="newAuditName" @bind="newAuditName"/><br /><br />
            <button class="btn btn-primary"  @onclick="createAudit">Create New Audit</button>
        </div>

        <div class="col-sm border m-3">
            <div class="panel-heading p-1" style="color: white; background-color : purple">
                Assign user to an audit
            </div> 
            <label for="selectAuditName"><b>Select Audit:</b></label><br />
            <select id="selectAuditName" @bind="addUserAuditID">
                @foreach (var audit in audits)
                {
                    <option value="@audit.ID">@audit.Name</option>
                }
            </select><br /><br />

            <label for="selectAuditUser"><b>Audit User:</b></label><br />
            <select id="selectAuditUser" @bind="addUserID">
                @foreach (var user in allUsers)
                {
                    <option value="@user.ID">@user.UserName</option>
                }
            </select><br /><br />
            <button class="btn btn-primary" @onclick="addUsertoAudit">Add User</button>
        </div>

        <div class="col-sm border m-3">
            <div class="panel-heading p-1" style="color: white; background-color : purple">
                Delete an audit
            </div>
            <label for="deleteAuditName"><b>Select Audit:</b></label><br />
            <select id="deleteAuditName" @bind="selectDeleteAuditID">
                @foreach(var audit in audits)
                {
                    <option value="@audit.ID">@audit.Name</option>
                }
            </select><br /><br />
            <button class="btn btn-primary"  @onclick="deleteAudit">Delete Audit</button>
        </div>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="handleBackClick">Back</button>
    </div>
</div>
