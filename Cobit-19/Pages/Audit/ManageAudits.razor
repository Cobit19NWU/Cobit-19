@page "/ManageAudit"

@using Blazored.Toast.Configuration;
@using Cobit_19.Business.Audits;
@using Cobit_19.Data.Models;
@using Cobit_19.Shared.Dtos
@using Cobit_19.Business.FocusAreas
@using Cobit_19.Business.Admin
@using Cobit_19.Shared.Enums

@inject FocusAreaProvider focusAreaProvider
@inject AuditProvider auditProvider
@inject AuthenticationStateProvider authStateProvider
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager navigationManager
@inject IToastService toastService

@using Blazored.Toast
@using Blazored.Toast.Services
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.WebUtilities;

@code{
    [Parameter]
    [SupplyParameterFromQuery]
    public int focusAreaID { get; set; }

    public string _userId { get; set; }
    public List<AuditDto> _audits { get; set; }

    private AuditModel _auditModel = new AuditModel();

    protected async override Task OnInitializedAsync()
    {
        // Get current user
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(user);
            _userId = currentUser.Id;
        }

        await RefreshData();
    }

    private async Task RefreshData()
    {
        _audits = await focusAreaProvider.GetAllAuditsForFocusArea(focusAreaID);
    }

    private async Task deleteAudit(int AuditId)
    {
        try
        {
            var res = await auditProvider.deleteAsync(AuditId);
            if(res != null)
            {
                _audits.Remove(_audits.Find(a => a.ID == AuditId));
                StateHasChanged();
                toastService.ShowSuccess("Audit deleted !");
                return;
            }
            else
            {
                toastService.ShowError("Audit NOT deleted!");
            }
        }
        catch
        {
            toastService.ShowError("Audit NOT deleted !");
        }
    }

    private async Task AddAudit()
    {

        var newAudit = new AuditEditorDto
            {
                FocusAreaID = focusAreaID,
                Name = _auditModel.AuditName,
                UserID = _userId,
                DateCreated = DateTime.Now,
                DateCompleted = null,
                Status = AuditStatus.NotStarted
            };

        var res = await auditProvider.createAsync(newAudit);
        if(res != null)
        {
            toastService.ShowSuccess("Audit Created");
            _audits.Add(res);
            StateHasChanged();
            await RefreshData();
        }
        else
        {
            toastService.ShowError("Audit NOT created! Unknown Issue");
        }
    }

    

    private void NavAuditMember(int auditId)
    {
        var queryStrDict = new Dictionary<string, string>
            {
                ["AuditId"] = (auditId).ToString(),
            };
        navigationManager.NavigateTo(
            QueryHelpers.AddQueryString("/ManageAuditUsers", queryStrDict)
        );
    }

    private void BackButtonPress()
    {
        var queryStrDict = new Dictionary<string, string>
            {
                ["focusAreaID"] = (focusAreaID).ToString(),
            };
        navigationManager.NavigateTo(
            QueryHelpers.AddQueryString("/AuditSelect", queryStrDict)
        );
    }

    private class AuditModel
    {
        [Required(ErrorMessage = "Audit is required.")]
        public string AuditName { get; set; }
    }
}

<div>
    <button class="btn btn-primary" @onclick="BackButtonPress">Back</button>
</div>

<div class="container-fluid">
    <BlazoredToasts Position="ToastPosition.TopLeft"
                    Timeout="4"
                    IconType="IconType.Material" />
    <div class="container">
        <div class="row border">
            @if (_audits is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <div class="container-fluid">
                    <div class="col">
                        <div class="panel panel-primary">

                            <div class="panel-heading p-2 mb-2" style="color: white; background-color : purple">
                                <b>
                                    Manage audits
                                </b>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col border m-2">
                        <table class="table table-hover table-striped modal-dialog-scrollable">
                            <thead style="">
                                <tr>
                                    <th class="panel-heading p-1" style="background-color: purple; color: white;">#</th>
                                    <th class="panel-heading p-1" style="background-color: purple; color: white;">Audits</th>
                                    <th class="panel-heading p-1" style="background-color: purple; color: white;">Delete</th>
                                    <th class="panel-heading p-1" style="background-color: purple; color: white;">Members</th>
                                </tr>

                            </thead>
                            <tbody>
                                @foreach (var audit in _audits)
                                {
                                    <tr>
                                        <td>@(_audits.IndexOf(audit) + 1)</td>

                                        <td>@audit.Name</td>
                                        <td>
                                            <button class="btn btn-danger" @onclick="() => deleteAudit(audit.ID)">Delete</button>
                                        </td>
                                        <td>
                                            <button class="btn btn-primary" @onclick="() => NavAuditMember(audit.ID)">Manage Users</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="col border m-2">
                        <div class="panel-heading p-1" style="color: white; font-weight: bold;background-color : purple">
                            Create new audit
                        </div>
                        <div class="">
                            <EditForm Model="@_auditModel" OnValidSubmit="AddAudit">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                    <label class="m-1" for="nameField"><b>Enter Audit Name:</b></label>
                                    <InputText id="nameField" @bind-Value="@_auditModel.AuditName" class="form-control" />
                                    <ValidationMessage For="@(() => _auditModel.AuditName)" />
                                </div>
                                <div class="form-group align-content-center p-2">
                                    <button type="submit" class="btn btn-primary">Add Audit</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>