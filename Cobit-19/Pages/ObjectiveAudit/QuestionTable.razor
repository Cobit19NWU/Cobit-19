@using Cobit_19.Business.Admin;
@using Cobit_19.Data.Models;
@using Cobit_19.Shared.Dtos
@using Cobit_19.Business.ObjectiveAudits
@using Microsoft.AspNetCore.Identity;
@using Cobit_19.Shared.Enums;
@inject IServiceProvider serviceProvider
@inject ObjectiveAuditProvider objectiveAuditProvider
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authStateProvider
@inject UserManagementProvider userManagementProvider

@code {
    [Parameter]
    public FullObjectiveAuditDto auditJSON { get; set; }

    [Parameter]
    public int componentID { get; set; }

    [Parameter]
    public int subComponentID { get; set; }

    [Parameter]
    public int objectiveAuditId { get; set; }

    public List<ComponentQuestionDto>? compQuestions;
    public List<SubComponentQuestionDto>? subCompQuestions;
    public SubComponentDto subComponent;
    public ComponentDto component;
    public string structureImageLink;
    public List<SubComponentQuestionDto> MLevelQuestions;
    public List<SubComponentQuestionDto> relatedGuidanceQuestions;
    public List<SubComponentQuestionDto> inputQuestions;
    public List<SubComponentQuestionDto> outputQuestions;
    public string auditJsonString;
    public string userID;
    public UserDto userDto;
    public string userRole;
    public ObjectiveAuditDto objectiveAudit;
    public AuditStatus status;

    protected async override Task OnInitializedAsync()
    {
        var scope = serviceProvider.CreateScope();
        var userManagementProvider = scope.ServiceProvider.GetRequiredService<UserManagementProvider>();

        if (subComponentID != -1)
        {
            subComponent = auditJSON.components[componentID].subComponents[subComponentID];
            subCompQuestions = subComponent.subComponentQuestions;
            MLevelQuestions = objectiveAuditProvider.GetSubComponentMLevelQuestions(subComponent);
            relatedGuidanceQuestions = objectiveAuditProvider.GetSubComponentRelatedGuidanceQuestions(subComponent);
            inputQuestions = objectiveAuditProvider.GetSubComponentInputQuestions(subComponent);
            outputQuestions = objectiveAuditProvider.GetSubComponentOutputQuestions(subComponent);
            component = auditJSON.components[componentID];
        }
        else
        {
            component = auditJSON.components[componentID];
            compQuestions = component.componentQuestions;
        }

        structureImageLink = auditJSON.structuresImage;

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(user);
            userID = currentUser.Id;
        }

        userDto = await userManagementProvider.GetUserDtoByIdAsync(userID);

        userRole = await userManagementProvider.getUserRoleAsync(userDto);

        objectiveAudit = objectiveAuditProvider.getByID(objectiveAuditId);
    }

    private bool readOnlyUserCheck()
    {
        if (userRole == "Head Auditor" || userRole == "Client")
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task updateComponent(ChangeEventArgs e, ComponentQuestionDto compQuestion = null, SubComponentQuestionDto subCompQuestion = null)
    {

        if (subCompQuestion != null)
        {
            updateSubCompQuestion(subCompQuestion, e);
        }
        else
        {
            updateCompQuestion(compQuestion, e);
        }

        if (componentID == 2)
        {
            ComponentDto infoFlowComp = auditJSON.components[4];
            int processCompFinalPerc = objectiveAuditProvider.calculateFinalProcessComponentScore(component, infoFlowComp);
            component.componentPercFinal = processCompFinalPerc;
        }
        else if (subComponentID != -1)
        {
            int finalPerc = objectiveAuditProvider.calculateComponentScore(component, true).Item3;
            component.componentPercFinal = finalPerc;
        }
        else
        {
            int finalPerc = objectiveAuditProvider.calculateComponentScore(component, false).Item3;
            component.componentPercFinal = finalPerc;
        }

        List<string> MLevels = new List<string> { "Maturity Level 1", "Maturity Level 2", "Maturity Level 3", "Maturity Level 4", "Maturity Level 5" };

        foreach (string MLevel in MLevels)
        {
            double finalMaturityLevelPerc = objectiveAuditProvider.calculateFinalMaturityLevelPercs(auditJSON, MLevel);

            if (MLevel == "Maturity Level 1")
            {
                auditJSON.maturityLevel1PercFinal = finalMaturityLevelPerc;
            }
            else if (MLevel == "Maturity Level 2")
            {
                auditJSON.maturityLevel2PercFinal = finalMaturityLevelPerc;
            }
            else if (MLevel == "Maturity Level 3")
            {
                auditJSON.maturityLevel3PercFinal = finalMaturityLevelPerc;
            }
            else if (MLevel == "Maturity Level 4")
            {
                auditJSON.maturityLevel4PercFinal = finalMaturityLevelPerc;
            }
            else if (MLevel == "Maturity Level 5")
            {
                auditJSON.maturityLevel5PercFinal = finalMaturityLevelPerc;
            }
        }

        status = AuditStatus.NotStarted;

        foreach (var component in auditJSON.components)
        {
            if (component.componentPercFinal != 0)
            {
                status = AuditStatus.InProgress;
            }
        }

        var editedObjectiveAudit = new ObjectiveAuditEditorDto
            {
                ID = objectiveAudit.ID,
                ApplicationUserID = objectiveAudit.ApplicationUserID,
                Selected = objectiveAudit.Selected,
                Status = status,
                DateCompleted = objectiveAudit.DateCompleted
            };

        await objectiveAuditProvider.updateAsync(editedObjectiveAudit);

        auditJSON.maturityLevel = objectiveAuditProvider.CalculateFinalMaturityLevel(auditJSON);

        auditJsonString = AuditJSONParsingService.auditTemplateSerializer(auditJSON);

        objectiveAuditProvider.updateAuditJSON(objectiveAuditId, auditJsonString);

        StateHasChanged();
    }

    private void updateSubCompQuestion(SubComponentQuestionDto subCompQuestion, ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            subCompQuestion.questionAnswer = int.Parse(e.Value.ToString());
            subCompQuestion.questionScore = objectiveAuditProvider.calculateAnswerScore(subCompQuestion.questionAnswer);
        }
    }

    private void updateCompQuestion(ComponentQuestionDto compQuestion, ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            compQuestion.questionAnswer = int.Parse(e.Value.ToString());
            compQuestion.questionScore = objectiveAuditProvider.calculateAnswerScore(compQuestion.questionAnswer);
        }

    }

    private void updateQuestionComment(ChangeEventArgs e, ComponentQuestionDto compQuestion = null, SubComponentQuestionDto subCompQuestion = null)
    {
        if (compQuestion != null)
        {
            compQuestion.questionComment = e.Value.ToString();
        }
        else
        {
            subCompQuestion.questionComment = e.Value.ToString();
        }

        auditJsonString = AuditJSONParsingService.auditTemplateSerializer(auditJSON);

        objectiveAuditProvider.updateAuditJSON(objectiveAuditId, auditJsonString);
    }

}

<div class="container">
    @if (componentID == 0)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateSubComponentScore(subCompQuestions).Item3 % </span></div>
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Enterprise Goal</th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < subCompQuestions.Count; i++)
                {
                    SubComponentQuestionDto subCompQuestion = subCompQuestions[i];
                    <tr>
                        <td>@subCompQuestion.questionDescription</td>
                        <td>
                            <select name="answer" value="@subCompQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, subCompQuestion: subCompQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@subCompQuestion.questionScore</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, subCompQuestion: subCompQuestion))" value="@subCompQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (componentID == 1)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateSubComponentScore(subCompQuestions).Item3 % </span></div>
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Allignment Goal</th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < subCompQuestions.Count; i++)
                {
                    SubComponentQuestionDto subCompQuestion = subCompQuestions[i];
                    <tr>
                        <td>@subCompQuestion.questionDescription</td>
                        <td>
                            <select name="answer" value="@subCompQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, subCompQuestion: subCompQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(subCompQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@objectiveAuditProvider.calculateAnswerScore(subCompQuestion.questionAnswer)</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, subCompQuestion: subCompQuestion))" value="@subCompQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (componentID == 2)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateSubComponentScore(subCompQuestions).Item3 % </span></div>
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Level</th>
                    <th>Management Practices (MP) and Metrics to measure the achievement of the Management Practices (MP): </th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < MLevelQuestions.Count; i++)
                {
                    SubComponentQuestionDto MLevelQuestion = MLevelQuestions[i];
                    <tr>
                        <td>@MLevelQuestion.questionType</td>
                        <td>@MLevelQuestion.questionDescription</td>
                        <td>
                            <select name="answer" value="@MLevelQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, subCompQuestion: MLevelQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(MLevelQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(MLevelQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(MLevelQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(MLevelQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@objectiveAuditProvider.calculateAnswerScore(MLevelQuestion.questionAnswer)</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, subCompQuestion: MLevelQuestion))" value="@MLevelQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (relatedGuidanceQuestions != null)
        {
            <div class="row border m-4">
                <div class="col bg-danger rounded-3 m-2">
                    <h4>N (Not achieved)</h4>
                </div>
                <div class="col bg-warning rounded-3 m-2">
                    <h4>P (Partially achieved)</h4>
                </div>
                <div class="col bg-success rounded-3 m-2">
                    <h4>L (Largely achieved)</h4>
                </div>
                <div class="col bg-primary rounded-3 m-2">
                    <h4>F (Fully achieved)</h4>
                </div>
            </div>

            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Related Guidance</th>
                        <th>Detailed Reference</th>
                        <th>Importance</th>
                        <th>N</th>
                        <th>P</th>
                        <th>L</th>
                        <th>F</th>
                        <th>Score</th>
                        <th>Comment</th>
                    </tr>
                </thead>

                <tbody>
                    @for (int i = 0; i < relatedGuidanceQuestions.Count; i++)
                    {
                        SubComponentQuestionDto relatedGuidanceQuestion = relatedGuidanceQuestions[i];
                        <tr>
                            <td>@relatedGuidanceQuestion.relatedGuidance</td>
                            <td>@relatedGuidanceQuestion.detailedReference</td>
                            <td>
                                <select name="answer" value="@relatedGuidanceQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, subCompQuestion: relatedGuidanceQuestion))" disabled="@readOnlyUserCheck()">
                                    @for (int j = 0; j <= 10; j++)
                                    {
                                        <option value="@j">@j</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(relatedGuidanceQuestion.questionAnswer) == 0 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(relatedGuidanceQuestion.questionAnswer) == 1 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(relatedGuidanceQuestion.questionAnswer) == 2 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(relatedGuidanceQuestion.questionAnswer) == 3 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>@objectiveAuditProvider.calculateAnswerScore(relatedGuidanceQuestion.questionAnswer)</td>
                            <td>
                                <input type="text" @onchange="@((e) => updateQuestionComment(e, subCompQuestion: relatedGuidanceQuestion))" value="@relatedGuidanceQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
    else if (componentID == 3)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            else
            {
                <div class="col-sm text-center">Component @component.componentName - @component.componentDescription</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateComponentScore(component, false).Item3 % </span></div>
        </div>

        <div class="d-flex justify-content-center border mt-2">
            <img src="@structureImageLink" alt="Structures image" width="700" />
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Sub-Component</th>
                    <th class="col-12">Regarding the Organisational Structures above. For each management practice, look at the roles and responsibilities diagram according to your organisational context, and select a level of importance/relevance:</th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < compQuestions.Count; i++)
                {
                    ComponentQuestionDto compQuestion = compQuestions[i];
                    <tr>
                        <td>@compQuestion.questionType</td>
                        <td>@compQuestion.questionDescription</td>
                        <td>
                            <select name="answer" value="@compQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, compQuestion: compQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@objectiveAuditProvider.calculateAnswerScore(compQuestion.questionAnswer)</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, compQuestion: compQuestion))" value="@compQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (componentID == 4)
    {
        <div class="row border p-2 p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateSubComponentScore(subCompQuestions).Item3 % </span></div>
        </div>

        @if (inputQuestions != null)
        {
            <div class="row border m-4">
                <div class="col bg-danger rounded-3 m-2">
                    <h4>N (Not achieved)</h4>
                </div>
                <div class="col bg-warning rounded-3 m-2">
                    <h4>P (Partially achieved)</h4>
                </div>
                <div class="col bg-success rounded-3 m-2">
                    <h4>L (Largely achieved)</h4>
                </div>
                <div class="col bg-primary rounded-3 m-2">
                    <h4>F (Fully achieved)</h4>
                </div>
            </div>

            <table class="table table-bordered mt-4">
                <thead>
                    <tr>
                        <th colspan="9">@subComponent.subComponentCode received the following inputs from upstream processes</th>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <th>From</th>
                        <th>Importance</th>
                        <th>N</th>
                        <th>P</th>
                        <th>L</th>
                        <th>F</th>
                        <th>Score</th>
                        <th>Comment</th>
                    </tr>
                </thead>

                <tbody>
                    @for (int i = 0; i < inputQuestions.Count; i++)
                    {
                        SubComponentQuestionDto inputQuestion = inputQuestions[i];
                        <tr>
                            <td>@inputQuestion.questionDescription</td>
                            <td>@inputQuestion.inputFrom</td>
                            <td>
                                <select name="answer" value="@inputQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, subCompQuestion: inputQuestion))" disabled="@readOnlyUserCheck()">
                                    @for (int j = 0; j <= 10; j++)
                                    {
                                        <option value="@j">@j</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(inputQuestion.questionAnswer) == 0 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(inputQuestion.questionAnswer) == 1 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(inputQuestion.questionAnswer) == 2 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(inputQuestion.questionAnswer) == 3 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>@objectiveAuditProvider.calculateAnswerScore(inputQuestion.questionAnswer)</td>
                            <td>
                                <input type="text" @onchange="@((e) => updateQuestionComment(e, subCompQuestion: inputQuestion))" value="@inputQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        @if (outputQuestions != null)
        {
            <div class="row border m-4">
                <div class="col bg-danger rounded-3 m-2">
                    <h4>N (Not achieved)</h4>
                </div>
                <div class="col bg-warning rounded-3 m-2">
                    <h4>P (Partially achieved)</h4>
                </div>
                <div class="col bg-success rounded-3 m-2">
                    <h4>L (Largely achieved)</h4>
                </div>
                <div class="col bg-primary rounded-3 m-2">
                    <h4>F (Fully achieved)</h4>
                </div>
            </div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th colspan="9">@subComponent.subComponentCode generated the following outputs, and outputs were forwarded to all relevant down-stream processes.</th>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <th>To</th>
                        <th>Importance</th>
                        <th>N</th>
                        <th>P</th>
                        <th>L</th>
                        <th>F</th>
                        <th>Score</th>
                        <th>Comment</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (SubComponentQuestionDto outputQuestion in outputQuestions)
                    {
                        <tr>
                            <td>@outputQuestion.questionDescription</td>
                            <td>@outputQuestion.outputTo</td>
                            <td>
                                <select name="answer" value="@outputQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, subCompQuestion: outputQuestion))" disabled="@readOnlyUserCheck()">
                                    @for (int j = 0; j <= 10; j++)
                                    {
                                        <option value="@j">@j</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(outputQuestion.questionAnswer) == 0 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(outputQuestion.questionAnswer) == 1 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(outputQuestion.questionAnswer) == 2 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>
                                <div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">
                                    @(
                                        objectiveAuditProvider.GetAnswerAchievement(outputQuestion.questionAnswer) == 3 ? "X" : " "
                                        )
                                </div>
                            </td>
                            <td>@objectiveAuditProvider.calculateAnswerScore(outputQuestion.questionAnswer)</td>
                            <td>
                                <input type="text" @onchange="@((e) => updateQuestionComment(e, subCompQuestion: outputQuestion))" value="@outputQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
    else if (componentID == 5)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            else
            {
                <div class="col-sm text-center">Component @component.componentName - @component.componentDescription</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateComponentScore(component, false).Item3 % </span></div>
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Skills</th>
                    <th>Related Guidance (Standards, frameworks, Compliance Requirements)</th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < compQuestions.Count; i++)
                {
                    ComponentQuestionDto compQuestion = compQuestions[i];
                    <tr>
                        <td>@compQuestion.questionSkill</td>
                        <td>@compQuestion.relatedGuidance</td>
                        <td>
                            <select name="answer" value="@compQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, compQuestion: compQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@objectiveAuditProvider.calculateAnswerScore(compQuestion.questionAnswer)</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, compQuestion: compQuestion))" value="@compQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (componentID == 6)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            else
            {
                <div class="col-sm text-center">Component @component.componentName - @component.componentDescription</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateComponentScore(component, false).Item3 % </span></div>
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Relevant policy</th>
                    <th class="col-12">Policy Description</th>
                    <th>Related Reference</th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < compQuestions.Count; i++)
                {
                    ComponentQuestionDto compQuestion = compQuestions[i];
                    <tr>
                        <td>@compQuestion.relevantPolicy</td>
                        <td>@compQuestion.policyDescription</td>
                        <td>@compQuestion.detailedReference</td>
                        <td>
                            <select name="answer" value="@compQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, compQuestion: compQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@objectiveAuditProvider.calculateAnswerScore(compQuestion.questionAnswer)</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, compQuestion: compQuestion))" value="@compQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (componentID == 7)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            else
            {
                <div class="col-sm text-center">Component @component.componentName - @component.componentDescription</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateComponentScore(component, false).Item3 % </span></div>
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Key Culture Element</th>
                    <th>Detailed & Related Reference</th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < compQuestions.Count; i++)
                {
                    ComponentQuestionDto compQuestion = compQuestions[i];
                    <tr>
                        <td>@compQuestion.keyCultureElement</td>
                        <td>@compQuestion.detailedReference</td>
                        <td>
                            <select name="answer" value="@compQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, compQuestion: compQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@objectiveAuditProvider.calculateAnswerScore(compQuestion.questionAnswer)</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, compQuestion: compQuestion))" value="@compQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (componentID == 8)
    {
        <div class="row border p-2 mt-4">
            @if (subComponentID != -1)
            {
                <div class="col-sm text-center">@subComponent.subComponentCode - @subComponent.subComponentName</div>
            }
            else
            {
                <div class="col-sm text-center">Component @component.componentName - @component.componentDescription</div>
            }
            <div class="col-sm text-center">Total - <span class="badge bg-primary">@objectiveAuditProvider.calculateComponentScore(component, false).Item3 % </span></div>
        </div>

        <div class="row border m-4">
            <div class="col bg-danger rounded-3 m-2">
                <h4>N (Not achieved)</h4>
            </div>
            <div class="col bg-warning rounded-3 m-2">
                <h4>P (Partially achieved)</h4>
            </div>
            <div class="col bg-success rounded-3 m-2">
                <h4>L (Largely achieved)</h4>
            </div>
            <div class="col bg-primary rounded-3 m-2">
                <h4>F (Fully achieved)</h4>
            </div>
        </div>

        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Importance</th>
                    <th>N</th>
                    <th>P</th>
                    <th>L</th>
                    <th>F</th>
                    <th>Score</th>
                    <th>Comment</th>
                </tr>
            </thead>

            <tbody>
                @for (int i = 0; i < compQuestions.Count; i++)
                {
                    ComponentQuestionDto compQuestion = compQuestions[i];
                    <tr>
                        <td>@compQuestion.questionDescription</td>
                        <td>
                            <select name="answer" value="@compQuestion.questionAnswer" @onchange="@((e) => updateComponent(e, compQuestion: compQuestion))" disabled="@readOnlyUserCheck()">
                                @for (int j = 0; j <= 10; j++)
                                {
                                    <option value="@j">@j</option>
                                }
                            </select>
                        </td>
                        <td><div class="bg-danger rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 0 ? "X" : " ")</div></td>
                        <td><div class="bg-warning rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 1 ? "X" : " ")</div></td>
                        <td><div class="bg-success rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 2 ? "X" : " ")</div></td>
                        <td><div class="bg-primary rounded-3 text-center" style="width: 60px; height: 50px;">@(objectiveAuditProvider.GetAnswerAchievement(compQuestion.questionAnswer) == 3 ? "X" : " ")</div></td>
                        <td>@objectiveAuditProvider.calculateAnswerScore(compQuestion.questionAnswer)</td>
                        <td>
                            <input type="text" @onchange="@((e) => updateQuestionComment(e, compQuestion: compQuestion))" value="@compQuestion.questionComment" readonly="@readOnlyUserCheck()" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>