@page "/objectiveAuditSelect"
@using Cobit_19.Business.Admin;
@using Cobit_19.Business.Reports;
@using Cobit_19.Data.Models;
@using Cobit_19.Shared.Dtos
@using Cobit_19.Shared.Enums
@using Microsoft.AspNetCore.Identity
@using Cobit_19.Business.ObjectiveAudits
@using Cobit_19.Business.Audits
@using Microsoft.AspNetCore.WebUtilities;
@inject ObjectiveAuditProvider objectiveAuditProvider
@inject NavigationManager navigationManager
@inject AuditProvider auditProvider
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authStateProvider
@inject ReportProvider reportProvider
@inject UserManagementProvider userManagementProvider
@inject IServiceProvider serviceProvider
@inject IJSRuntime JSRuntime


@code {
    IList<ObjectiveAuditDto> objectiveAudits;
    [Parameter]
    [SupplyParameterFromQuery]
    public int AuditId { get; set; }

    public AuditDto audit;
    public string auditName;
    public string userID;

    protected async override Task OnInitializedAsync()
    {
        audit = await auditProvider.getAsync(AuditId);
        auditName = audit.Name;

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(user);
            userID = currentUser.Id;
        }
    }

    private void auditButtonClick(int objectiveAuditId)
    {
        navigationManager.NavigateTo("/auditDashboard?objectiveAuditId=" + objectiveAuditId);
    }

    private string statusFormatter(AuditStatus status)
    {
        if (status == AuditStatus.NotStarted)
        {
            return "Not Started";
        }
        else if (status == AuditStatus.InProgress)
        {
            return "In Progress";
        }
        else
        {
            return "Completed";
        }
    }

    private string statusBadge (AuditStatus status)
    {
        if (status == AuditStatus.NotStarted)
        {
            return "badge bg-danger";
        }
        else if (status == AuditStatus.InProgress)
        {
            return "badge bg-warning";
        }
        else
        {
            return "badge bg-success";
        }
    }

    private void BackButtonPress()
    {
        var queryStrDict = new Dictionary<string, string>
            {
                ["AuditId"] = (AuditId).ToString(),
            };
        navigationManager.NavigateTo(
            QueryHelpers.AddQueryString("/Audit", queryStrDict)
        );
    }

    public async void ExportComplete(int objectiveAuditId)
    {
        var pdfStream = await reportProvider.createObjectiveAuditReport(objectiveAuditId);

        if (pdfStream != null)
        {
            byte[] pdfBytes = pdfStream.ToArray();

            await JSRuntime.InvokeVoidAsync("downloadFile", pdfBytes, "sample.pdf");
        }
    }

}

<div>
    <button type="button" onclick="@(() => BackButtonPress())" class="mb-2 btn btn-primary">
        Back
    </button>
</div>
<div class="container">
    <div>
        <h2>Maturity Assessments</h2>
    </div>

    <div>
        <table class="table">
            <AuthorizeView Roles="Administrator, Head Auditor, Client">
                <thead>
                    <tr style="background-color: purple; color: white;">
                        <th>Audit Name</th>
                        <th>Description</th>
                        <th>Assigned to audit</th>
                        <th>Maturity Level</th>
                        <th>Status</th>
                        <th></th>
                        <th>Report</th>
                    </tr>
                </thead>
            </AuthorizeView>
            <AuthorizeView Roles="Governance Auditor, Management Auditor">
                <thead>
                    <tr style="background-color: purple; color: white;">
                        <th>Audit Name</th>
                        <th>Description</th>
                        <th>Maturity Level</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
            </AuthorizeView>

            <AuthorizeView Roles="Administrator, Head Auditor, Client">
                <tbody>
                    @{
                        var scope = serviceProvider.CreateScope();
                        var objectiveAuditGetAllProvider = scope.ServiceProvider.GetRequiredService<ObjectiveAuditProvider>();
                        objectiveAudits = objectiveAuditGetAllProvider.getObjectiveAuditsForUser(userID, AuditId);
                    }

                    @foreach (var objectiveAudit in objectiveAudits)
                    {
                        var fullAudit = AuditJSONParsingService.parseAuditTemplate(objectiveAudit.UserAuditObject);
                        auditMembers = objectiveAuditProvider.getMembersByObjectiveAuditID(objectiveAudit.ID);
                        <tr>
                            <td>@auditName</td>
                            <td>@objectiveAudit.Objective.Code</td>
                            <td>
                                @foreach (var auditMember in auditMembers)
                                {
                                    var user = userManagementProvider.GetUserDtoByIdAsync(auditMember.ApplicationUserID).Result;
                                    @user.UserName
                                    <br />
                                }
                            </td>
                            <td>@fullAudit.maturityLevel</td>
                            <td><span class="@statusBadge(audit.Status)">@statusFormatter(objectiveAudit.Status)</span></td>
                            <td><button class="btn btn-primary" @onclick="() => auditButtonClick(objectiveAudit.ID)">Modify</button></td>
                            <td><button class="btn btn-outline-primary" @onclick="() => ExportComplete(objectiveAudit.ID)">Report</button></td>
                        </tr>
                    }
                </tbody>
            </AuthorizeView>

            <AuthorizeView Roles="Governance Auditor, Management Auditor">
                <tbody>
                    @{
                        var scope = serviceProvider.CreateScope();
                        var objectiveAuditGetAllProvider = scope.ServiceProvider.GetRequiredService<ObjectiveAuditProvider>();
                        objectiveAudits = objectiveAuditGetAllProvider.getObjectiveAuditsForUser(userID, AuditId);
                    }

                    @foreach (var objectiveAudit in objectiveAudits)
                    {
                        var fullAudit = AuditJSONParsingService.parseAuditTemplate(objectiveAudit.UserAuditObject);
                        auditMembers = objectiveAuditProvider.getMembersByObjectiveAuditID(objectiveAudit.ID);
                        <tr>
                            <td>@auditName</td>
                            <td>@objectiveAudit.Objective.Code</td>
                            <td>@fullAudit.maturityLevel</td>
                            <td><span class="@statusBadge(audit.Status)">@statusFormatter(objectiveAudit.Status)</span></td>
                            <td><button class="btn btn-primary" @onclick="() => auditButtonClick(objectiveAudit.ID)">Modify</button></td>
                        </tr>
                    }
                </tbody>
            </AuthorizeView>
        </table>
    </div>
</div>