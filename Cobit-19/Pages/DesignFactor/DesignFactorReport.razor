@page "/DesignFactorReport"
@using Cobit_19.Business.Audits;
@using Cobit_19.Business.Reports;
@using Cobit_19.Shared.Dtos;
@using Syncfusion.Blazor.Charts
@using System.Text.RegularExpressions;

@inject ReportProvider reportProvider
@inject AuditProvider auditProvider
@inject IJSRuntime JSRuntime

@code {
    protected SfChart? sfChart;
    protected List<ObjectiveValueDto>? _objectiveValueDtos;
    protected List<ChartSeries> _seriesCollection = new List<ChartSeries>();

    [Parameter]
    [SupplyParameterFromQuery]
    public int AuditId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_objectiveValueDtos == null)
        {   var designFactors = new List<DesignFactorDto>();

            // This is a temporary solution to get the design factors
            var dfSummary = await auditProvider.getDesignFactorsAsync(AuditId);

            foreach (var df in dfSummary)
            {
                designFactors.Add(await auditProvider.getDesignFactorFullAsync(AuditId, df.ID));
            }

            var _objectiveDtos = await auditProvider.getObjectivesAsync();

            _objectiveValueDtos = MappingService.CalculateSummary(designFactors, _objectiveDtos);
            changeChartType(ChartSeriesType.Column);
        }
    }

    private void changeChartType(ChartSeriesType chartSeriesType)
    {
        if (_seriesCollection is not null)
        {
            _seriesCollection.Clear();

            _seriesCollection.Add( new ChartSeries
            {
                DataSource = _objectiveValueDtos,
                XName = "Objective",
                YName = "RelativeInportance",
                Fill = "#4A26D9",
                Type = chartSeriesType,
            });
        }
    }

    private async Task Export(MouseEventArgs args)
    {
        await sfChart.ExportAsync(ExportType.PNG, "Goals Cascade Report", Syncfusion.PdfExport.PdfPageOrientation.Portrait, false);
    }

    public async void ExportComplete(ExportEventArgs exportEventArgs)
    {
        var dataURL = exportEventArgs.DataUrl;
        var base64Data = Regex.Match(dataURL, @"data:image/(?<type>.+?),(?<data>.+)").Groups["data"].Value;

        var pdfStream = await reportProvider.createGoalsCascadeReport(AuditId, base64Data);

        if (pdfStream != null)
        {
            byte[] pdfBytes = pdfStream.ToArray();

            await JSRuntime.InvokeVoidAsync("downloadFile", pdfBytes, "sample.pdf");
        }
    }
}

<AuthorizeView>
    <div class="container-fluid bg-white border-1 border-dark">
        <div class="row border-2">
            <div>
                <div class="row text-center p-3 text-white h3" style="background-color : purple;">
                    Summary - View of all Design Factors
                </div>
                <div class="container-lg-fluid">
                    <SfChart @ref="@sfChart" Title="Business Objectives">
                        <ChartPrimaryXAxis Interval="1" LabelRotation="90" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
                        <ChartPrimaryYAxis Title="Relative Importance" ValueType="Syncfusion.Blazor.Charts.ValueType.Double" />
                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                        @if (_objectiveValueDtos is not null)
                        {
                            <ChartSeriesCollection>
                                @foreach (var series in _seriesCollection)
                                {
                                    <ChartSeries DataSource="@series.DataSource" XName="@series.XName" YName="@series.YName" Fill="@series.Fill"
                                                 Type="@series.Type">
                                    </ChartSeries>
                                }
                            </ChartSeriesCollection>
                        }
                        <ChartEvents OnExportComplete="@ExportComplete"></ChartEvents>
                    </SfChart>
                </div>

                <div class="row">
                    <div class="col-sm-1 btn-group rounded-3">
                        <button class="btn btn-outline-light" style="background-color:purple;" @onclick="@(() => changeChartType(ChartSeriesType.Radar))">Radar</button>
                        <button class="btn btn-outline-light" style="background-color:purple;" @onclick="@(() => changeChartType(ChartSeriesType.Column))">Column</button>
                        <button class="btn btn-outline-light" style="background-color:purple;" @onclick="@(() => changeChartType(ChartSeriesType.Bar))">Bar</button>
                    </div>
                    <div class="col">
                        <button class="btn btn-outline-light float-xl-end" style="background-color:purple;" @onclick="Export">Download Report</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>